import { defineConfig } from 'vite'
import preact from '@preact/preset-vite'
import { viteSingleFile } from "vite-plugin-singlefile"

import { writeFileSync, readFileSync } from 'node:fs';
import { resolve } from 'node:path';

async function zopfliCompress(input: string | Buffer): Promise<Buffer> {
  const args = ["zopfli", "--iterations=1500", "--gzip", "/dev/stdin", "-c"];

  try {
    // Spawn the zopfli process, passing the input via stdin
    const proc = Bun.spawn(args, {
      // @ts-ignore
      stdin: input,
      stdout: 'pipe',
      stderr: 'pipe',
    });

    await proc.exited;

    // Await the process completion and get the exit code
    const exitCode = proc.exitCode;

    // Check if the process exited with an error
    if (exitCode !== 0) {
      const stderr = await new Response(proc.stderr).text();
      throw new Error(`zopfli process exited with code ${exitCode}: ${stderr.trim()}`);
    }

    // Read the compressed data from stdout
    const compressedData = await new Response(proc.stdout).arrayBuffer();
    
    return Buffer.from(compressedData);
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      throw new Error("The 'zopfli' command was not found. Please ensure it is installed and in your PATH.");
    }
    // Re-throw other errors
    throw error;
  }
}

// @ts-ignore
function htmlToCArray(options = {}) {
  const {
    outputFileName = 'html.h',
    arrayName = 'html_data'
  }: any = options;

  let config: any;

  return {
    name: 'vite-plugin-html-to-c-array',
    // This plugin only runs during the build process
    apply: 'build',

    // Store the resolved config
    configResolved(resolvedConfig: any) {
      config = resolvedConfig;
    },

    // This hook runs after the bundle is generated and written to disk
    async closeBundle() {
      // Resolve the path to the final index.html file
      const htmlFilePath = resolve(config.build.outDir, 'index.html');
      const outputHeaderPath = resolve(config.build.outDir, outputFileName);
      
      // @ts-ignore
      this.info(`Reading generated HTML from: ${htmlFilePath}`);

      try {
        // 1. Read the generated HTML file content
        const htmlContent = readFileSync(htmlFilePath);
        
        // 2. Compress the HTML using gzip
        //const gzippedContent = Bun.gzipSync(htmlContent);
        const gzippedContent = await zopfliCompress(htmlContent);

        // 3. Convert the gzipped buffer into a C array literal string
        // Each byte is formatted as a two-digit hexadecimal number (e.g., 0x0A)
        const cArrayLiteral = Array.from(gzippedContent)
          .map(byte => `0x${byte.toString(16).padStart(2, '0')}`)
          .join(', ');

        // Create the full content for the C header file
        const headerFileContent = `
// This file is generated by vite-plugin-html-to-c-array
// Do not edit this file manually.

// Original HTML size: ${htmlContent.length} bytes
// Gzipped size: ${gzippedContent.length} bytes

const unsigned char ${arrayName}[] = {
  ${cArrayLiteral}
};

const unsigned int ${arrayName}_len = ${gzippedContent.length};
`;
        
        // 4. Write the C header file to the output directory
        writeFileSync(outputHeaderPath, headerFileContent.trim());
        writeFileSync(resolve(config.build.outDir, '../../Software/src/lib/TinyWebServer/frontend.h'), headerFileContent.trim());

        // @ts-ignore
        this.info(`Successfully generated C array at: ${outputHeaderPath}, size: ${gzippedContent.length} bytes`);
        
      } catch (error) {
        // @ts-ignore
        this.error(`Failed to generate C array: ${error.message}`);
      }
    }
  };
}

import.meta.env.VITE_API_BASE = import.meta.env.NODE_ENV == "development" ? 'http://192.168.4.1:12345' : '';
//import.meta.env.VITE_API_BASE = import.meta.env.NODE_ENV == "development" ? 'http://192.168.0.107:12345' : '';

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    preact(), 
    // @ts-ignore
    {
      ...viteSingleFile(),
      apply: 'build'
    },
    // @ts-ignore
    htmlToCArray()
  ],
  // css: {
  //   transformer: 'lightningcss',
  //   lightningcss: {
  //     //targets: browserslistToTargets(browserslist('>= 0.25%'))
  //   }
  // },
  // build: {
  //   cssMinify: 'lightningcss'
  // }
})
